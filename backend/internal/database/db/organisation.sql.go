// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: organisation.sql

package db

import (
	"context"
)

const gLOBAL_CreateOrganisation = `-- name: GLOBAL_CreateOrganisation :one
INSERT INTO organisations (name)
VALUES ($1)
RETURNING id, name, created_at, deleted_at
`

func (q *Queries) GLOBAL_CreateOrganisation(ctx context.Context, name string) (Organisation, error) {
	row := q.db.QueryRow(ctx, gLOBAL_CreateOrganisation, name)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const gLOBAL_OrganisationById = `-- name: GLOBAL_OrganisationById :one
SELECT id, name, created_at, deleted_at
FROM organisations
WHERE id = $1
  AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GLOBAL_OrganisationById(ctx context.Context, id string) (Organisation, error) {
	row := q.db.QueryRow(ctx, gLOBAL_OrganisationById, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const gLOBAL_OrganisationList = `-- name: GLOBAL_OrganisationList :many
SELECT id, name, created_at, deleted_at
FROM organisations
WHERE deleted_at IS NULL
`

func (q *Queries) GLOBAL_OrganisationList(ctx context.Context) ([]Organisation, error) {
	rows, err := q.db.Query(ctx, gLOBAL_OrganisationList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organisation
	for rows.Next() {
		var i Organisation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
