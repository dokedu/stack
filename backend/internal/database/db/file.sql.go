// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: file.sql

package db

import (
	"context"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files (name, mime_type, bucket_id, organisation_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, mime_type, size, bucket_id, organisation_id, created_at, deleted_at
`

type CreateFileParams struct {
	Name           string `db:"name"`
	MimeType       string `db:"mime_type"`
	BucketID       string `db:"bucket_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile,
		arg.Name,
		arg.MimeType,
		arg.BucketID,
		arg.OrganisationID,
	)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MimeType,
		&i.Size,
		&i.BucketID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteFile = `-- name: DeleteFile :one
UPDATE files
SET deleted_at = NOW()
WHERE id = $1
  AND organisation_id = $2
RETURNING id, name, mime_type, size, bucket_id, organisation_id, created_at, deleted_at
`

type DeleteFileParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) DeleteFile(ctx context.Context, arg DeleteFileParams) (File, error) {
	row := q.db.QueryRow(ctx, deleteFile, arg.ID, arg.OrganisationID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MimeType,
		&i.Size,
		&i.BucketID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const fileById = `-- name: FileById :one
SELECT id, name, mime_type, size, bucket_id, organisation_id, created_at, deleted_at
FROM files
WHERE id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
LIMIT 1
`

type FileByIdParams struct {
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) FileById(ctx context.Context, arg FileByIdParams) (File, error) {
	row := q.db.QueryRow(ctx, fileById, arg.ID, arg.OrganisationID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MimeType,
		&i.Size,
		&i.BucketID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const fileListByBucketId = `-- name: FileListByBucketId :many
SELECT id, name, mime_type, size, bucket_id, organisation_id, created_at, deleted_at
FROM files
WHERE bucket_id = $1
  AND organisation_id = $2
  AND deleted_at IS NULL
ORDER BY name DESC
`

type FileListByBucketIdParams struct {
	BucketID       string `db:"bucket_id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) FileListByBucketId(ctx context.Context, arg FileListByBucketIdParams) ([]File, error) {
	rows, err := q.db.Query(ctx, fileListByBucketId, arg.BucketID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MimeType,
			&i.Size,
			&i.BucketID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFileName = `-- name: UpdateFileName :one
UPDATE files
SET name = $1
WHERE id = $2
  AND organisation_id = $3
RETURNING id, name, mime_type, size, bucket_id, organisation_id, created_at, deleted_at
`

type UpdateFileNameParams struct {
	Name           string `db:"name"`
	ID             string `db:"id"`
	OrganisationID string `db:"organisation_id"`
}

func (q *Queries) UpdateFileName(ctx context.Context, arg UpdateFileNameParams) (File, error) {
	row := q.db.QueryRow(ctx, updateFileName, arg.Name, arg.ID, arg.OrganisationID)
	var i File
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MimeType,
		&i.Size,
		&i.BucketID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
