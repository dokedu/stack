// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/dokedu/stack/backend/internal/database/db"
)

type CreateFileInput struct {
	Name     string          `json:"name"`
	FolderID *string         `json:"folderId,omitempty"`
	Upload   *graphql.Upload `json:"upload,omitempty"`
}

type CreateFilePayload struct {
	File *db.File `json:"file"`
}

type CreateUserInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
}

type DeleteFileInput struct {
	ID string `json:"id"`
}

type DeleteFilePayload struct {
	File *db.File `json:"file"`
}

type ForgotPasswordInput struct {
	Email string `json:"email"`
}

type ForgotPasswordPayload struct {
	Success bool `json:"success"`
}

type PageInfo struct {
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
	CurrentPage     int  `json:"currentPage"`
}

type ResetPasswordInput struct {
	Token    *string `json:"token,omitempty"`
	Password string  `json:"password"`
}

type ResetPasswordPayload struct {
	User         *db.User         `json:"user"`
	Token        string           `json:"token"`
	Organisation *db.Organisation `json:"organisation"`
}

type SignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type SignInPayload struct {
	User  *db.User `json:"user"`
	Token string   `json:"token"`
}

type SignOutPayload struct {
	Success bool `json:"success"`
}

type UpdateFileInput struct {
	ID       string  `json:"id"`
	Name     *string `json:"name,omitempty"`
	ParentID *string `json:"parentId,omitempty"`
}

type UpdateFilePayload struct {
	File *db.File `json:"file"`
}

type UpdatePasswordPayload struct {
	Success bool `json:"success"`
}

type UpdateUserInput struct {
	ID                 string     `json:"id"`
	FirstName          string     `json:"firstName"`
	LastName           string     `json:"lastName"`
	Email              *string    `json:"email,omitempty"`
	Grade              *int       `json:"grade,omitempty"`
	Birthday           *time.Time `json:"birthday,omitempty"`
	LeftAt             *time.Time `json:"leftAt,omitempty"`
	JoinedAt           *time.Time `json:"joinedAt,omitempty"`
	Emoji              *string    `json:"emoji,omitempty"`
	MissedHours        *int       `json:"missedHours,omitempty"`
	MissedHoursExcused *int       `json:"missedHoursExcused,omitempty"`
}

type UserConnection struct {
	Edges      []*db.User `json:"edges,omitempty"`
	PageInfo   *PageInfo  `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

type UserFilterInput struct {
	OrderBy     *UserOrderBy `json:"orderBy,omitempty"`
	ShowDeleted *bool        `json:"showDeleted,omitempty"`
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "asc"
	SortDirectionDesc SortDirection = "desc"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserOrderBy string

const (
	UserOrderByFirstNameAsc  UserOrderBy = "firstNameAsc"
	UserOrderByFirstNameDesc UserOrderBy = "firstNameDesc"
	UserOrderByLastNameAsc   UserOrderBy = "lastNameAsc"
	UserOrderByLastNameDesc  UserOrderBy = "lastNameDesc"
)

var AllUserOrderBy = []UserOrderBy{
	UserOrderByFirstNameAsc,
	UserOrderByFirstNameDesc,
	UserOrderByLastNameAsc,
	UserOrderByLastNameDesc,
}

func (e UserOrderBy) IsValid() bool {
	switch e {
	case UserOrderByFirstNameAsc, UserOrderByFirstNameDesc, UserOrderByLastNameAsc, UserOrderByLastNameDesc:
		return true
	}
	return false
}

func (e UserOrderBy) String() string {
	return string(e)
}

func (e *UserOrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserOrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserOrderBy", str)
	}
	return nil
}

func (e UserOrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
