package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"errors"
	"fmt"

	"github.com/dokedu/stack/backend/internal/database/db"
	"github.com/dokedu/stack/backend/internal/graph/model"
	"github.com/dokedu/stack/backend/internal/middleware"
	"github.com/dokedu/stack/backend/internal/msg"
	"github.com/jackc/pgx/v5/pgtype"
	gonanoid "github.com/matoous/go-nanoid/v2"
	"golang.org/x/crypto/bcrypt"
)

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.SignInInput) (*model.SignInPayload, error) {
	user, err := r.DB.GLOBAL_UserByEmail(ctx, input.Email)
	if err != nil {
		return nil, msg.ErrInvalidEmailOrPassword
	}

	if !user.Password.Valid {
		return nil, msg.ErrInvalidEmailOrPassword
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.Password.String), []byte(input.Password)); err != nil {
		return nil, msg.ErrInvalidEmailOrPassword
	}

	// Generate a new token
	token, err := gonanoid.New(32)
	if err != nil {
		return nil, msg.ErrInvalidEmailOrPassword
	}

	createSessionParams := db.GLOBAL_CreateSessionParams{
		UserID: user.ID,
		Token:  token,
	}

	_, err = r.DB.GLOBAL_CreateSession(ctx, createSessionParams)
	if err != nil {
		return nil, msg.ErrInvalidEmailOrPassword
	}

	return &model.SignInPayload{
		Token: token,
		User:  &user,
	}, nil
}

// SignOut is the resolver for the signOut field.
func (r *mutationResolver) SignOut(ctx context.Context) (*model.SignOutPayload, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthenticated
	}

	// TODO: migrate session tracking to a separate table and hard delete the sessions
	err := r.DB.GLOBAL_DeleteSessionsByUserID(ctx, currentUser.ID)
	if err != nil {
		return nil, errors.New("unable to sign out")
	}

	return &model.SignOutPayload{
		Success: true,
	}, nil
}

// ResetPassword is the resolver for the resetPassword field.
func (r *mutationResolver) ResetPassword(ctx context.Context, input model.ResetPasswordInput) (*model.ResetPasswordPayload, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthenticated
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, msg.ErrUnexpected
	}

	updateUserPasswordParams := db.UpdateUserPasswordParams{
		Password:       pgtype.Text{String: string(hashedPassword), Valid: true},
		ID:             currentUser.ID,
		OrganisationID: currentUser.OrganisationID,
	}

	user, err := r.DB.UpdateUserPassword(ctx, updateUserPasswordParams)
	if err != nil {
		return nil, msg.ErrUnexpected
	}

	return &model.ResetPasswordPayload{
		User:  &user,
		Token: "",
	}, nil
}

// ForgotPassword is the resolver for the forgotPassword field.
func (r *mutationResolver) ForgotPassword(ctx context.Context, input model.ForgotPasswordInput) (*model.ForgotPasswordPayload, error) {
	user, err := r.DB.GLOBAL_UserByEmail(ctx, input.Email)
	if err != nil {
		return &model.ForgotPasswordPayload{
			Success: false,
		}, nil
	}

	// Generate a new token
	token := gonanoid.Must(32)

	updateUserRecoveryTokenParams := db.UpdateUserRecoveryTokenParams{
		RecoveryToken:  pgtype.Text{String: token, Valid: true},
		ID:             user.ID,
		OrganisationID: user.OrganisationID,
	}

	// Update the user with the new token
	_, err = r.DB.UpdateUserRecoveryToken(ctx, updateUserRecoveryTokenParams)
	if err != nil {
		return &model.ForgotPasswordPayload{
			Success: false,
		}, nil
	}

	// Send the email to the user
	err = r.Mailer.SendPasswordReset(input.Email, user.FirstName, token)
	if err != nil {
		return &model.ForgotPasswordPayload{
			Success: false,
		}, nil
	}

	return &model.ForgotPasswordPayload{
		Success: true,
	}, nil
}

// UpdatePassword is the resolver for the updatePassword field.
func (r *mutationResolver) UpdatePassword(ctx context.Context, oldPassword string, newPassword string) (*model.UpdatePasswordPayload, error) {
	panic(fmt.Errorf("not implemented: UpdatePassword - updatePassword"))
}
