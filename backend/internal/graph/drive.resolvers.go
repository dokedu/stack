package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"log/slog"
	"time"

	"github.com/dokedu/stack/backend/internal/database/db"
	"github.com/dokedu/stack/backend/internal/graph/model"
	"github.com/dokedu/stack/backend/internal/middleware"
	"github.com/dokedu/stack/backend/internal/msg"
)

// Mime is the resolver for the mime field.
func (r *fileResolver) Mime(ctx context.Context, obj *db.File) (string, error) {
	return obj.MimeType, nil
}

// DeletedAt is the resolver for the deletedAt field.
func (r *fileResolver) DeletedAt(ctx context.Context, obj *db.File) (*time.Time, error) {
	return &obj.DeletedAt.Time, nil
}

// CreateFile is the resolver for the createFile field.
func (r *mutationResolver) CreateFile(ctx context.Context, input model.CreateFileInput) (*model.CreateFilePayload, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthenticated
	}

	slog.Info("user id", "user_id", currentUser.ID)

	return nil, nil
}

// UpdateFile is the resolver for the updateFile field.
func (r *mutationResolver) UpdateFile(ctx context.Context, input model.UpdateFileInput) (*model.UpdateFilePayload, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthenticated
	}

	slog.Info("user id", "user_id", currentUser.ID)

	return nil, nil
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, input model.DeleteFileInput) (*model.DeleteFilePayload, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthenticated
	}

	slog.Info("user id", "user_id", currentUser.ID)

	return nil, nil
}

// CreateSignedFileURL is the resolver for the createSignedFileUrl field.
func (r *mutationResolver) CreateSignedFileURL(ctx context.Context, id string) (string, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return "", msg.ErrUnauthenticated
	}

	slog.Info("user id", "user_id", currentUser.ID)

	return "", nil
}

// File is the resolver for the file field.
func (r *queryResolver) File(ctx context.Context, id string) (*db.File, error) {
	currentUser, ok := middleware.GetUser(ctx)
	if !ok {
		return nil, msg.ErrUnauthenticated
	}

	slog.Info("user id", "user_id", currentUser.ID)

	return nil, nil
}

// File returns FileResolver implementation.
func (r *Resolver) File() FileResolver { return &fileResolver{r} }

type fileResolver struct{ *Resolver }
